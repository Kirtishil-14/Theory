npx create-react-app@5.0.0 my-app
-----------------------------------
destructuring syntax----------------
const user = { name: 'kirtishil', age: 24 }
const { name, age } = user;
// name = 'kirtishil, age = 24

Destructuring also works on arrays, only it uses index instead of object keys:
const numbers = [1, 2, 3, 4, 5];
const [one, two] = numbers; // one = 1, two = 2
const [fruit1 ,,,, fruit5] = fruits;

const Susan = {
  firstName: "Susan",
  lastName: "Steward",
  age: 14,
  hobbies: {
    hobby1: "singing",
    hobby2: "dancing"
  }
};

const {firstName, age, hobbies:{hobby1}} = Susan;
console.log(firstName, age, hobby1); //"Susan" 14 "singing"

function individualData({firstName, age, hobbies:{hobby1}}){
  console.log(firstName, age, hobby1); //"Susan" 14 "singing"
}
individualData(Susan);
--------------------

The reduce method, which takes a function with two arguments(accumulator and item).We can also return the total number of all the array items using the reduce method
const numbers = [1, 2, 3];
const mySum = numbers.reduce((accumulator, num) => accumulator + num) // returns: 6.

let staffs = [
  { name: "Susan", age: 14, salary: 100 },
  { name: "Daniel", age: 16, salary: 120 },
  { name: "Bruno", age: 56, salary: 400 },
  { name: "Jacob", age: 15, salary: 110 },
  { name: "Sam", age: 64, salary: 500 },
  { name: "Dave", age: 56, salary: 380 },
  { name: "Neils", age: 65, salary: 540 }
];

const totalSalary = staffs.reduce((total, staff) => {
  total += staff.salary;
  return total;
},0)
console.log(totalSalary); // 2150

const salaryInfo = staffs.reduce(
  (total, staff) => {
    let staffTithe = staff.salary * 0.1;
    total.totalTithe += staffTithe;
    total['totalSalary'] += staff.salary;
    return total;
  },
  { totalSalary: 0, totalTithe: 0 }
);

console.log(salaryInfo); // { totalSalary: 2150 , totalTithe: 215 }
------------------------------------
function holdTillResponse() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('resolved');
    }, 2000);
  });
}

async function mainFun() {
  console.log('calling');
  const result = await holdTillResponse();
  console.log(result);
  //under this line will execute after above result
  console.log(111);
  // expected output: "resolved"
}

mainFun();

destructuring------
for object-----------
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';
}

nested object---------
const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red',
  registration: {
    city: 'Houston',
    state: 'Texas',
    country: 'USA'
  }
}

myVehicle(vehicleOne)

function myVehicle({ model, registration: { state } }) {
  const message = 'My ' + model + ' is registered in ' + state + '.';
}

----------------------------
redux:
createStore = create redux store
combineReducers = combine multiple slice reducers into single reducer
applyMiddleware = combine multiple middleware into store enhancer
compose = combine multiple store enhancers into single store enhancer

1.create store



----------------------------
react redux:
useSelector = reads value from store state and subscribe to updates
useDispatch = return store dispatch method to let you dispatch actions

connect = reads value from store and re-reads values when store updates

mapStateToProps = called every time when store state changes and return object of data this component needs

mapDispatchToProps = 
if it is a function it will called once on component creation.It will receive dispatch as an argument and should return object full of function that used dispatch to dispatch actions.
if it is an object full of action creators,each action creator will be turned into a prop function that automatically dispatches its action when needed

syntax = connect(mapStateToProps, mapDispatchToProps)(Component)

