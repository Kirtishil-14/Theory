npx create-react-app@5.0.0 my-app

version 17+

React: JS library

Babel: 
To transpile JSX code into simple react functions that can be understood by browsers

Real DOM:
The real DOM updates slower.
The real DOM can directly update HTML.
DOM manipulation is very expensive.
There is a lot of memory wastage in The real DOM.

Virtual DOM:
The virtual DOM updates faster.
The virtual DOM cannot directly update HTML.
DOM manipulation is very easy.
There is no memory wastage in the virtual DOM.

JSX: JavaScript XML

Types of Component: 
1.StateFull (class component)
2.StateLess (function component)


Props:
Read Only
Immutable (not change)
passed as a parameter from parent to child component
props are external and controlled by whatever renders the component

State: 
State changes can be asynchronous.
Mutable (can change)
not accessible to child component
state is internal and controlled by the component itself

setState 
It re-render component if some state or props changed
shouldComponentUpdate() calls automatically

forceUpdate
It re-render component without even changing state or props
It skips shouldComponentUpdate()


------------------------------------------------------
const [person, setPerson] = useState({
    name: 'ABC',
    work: {
      title: 'Programmer',
      city: 'Pune',
    }
  });

//update the title to 'Developer'
------------------------------------
setPerson({
      ...person,
      work: {
        ...person.work,
        title: 'Developrt'
      }
    });
---------------------------------
setPerson((prev)=>{
	return {...prev,work:{...prev.work,title:'developer'}}
})
----------------------------------


Lifecycle:
1.Mounting
  constructor() = set up the initial state and other initial values
  getDerivedStateFromProps() = It takes state as an argument, and returns an object with changes to the state
  render() = outputs the HTML to the DOM
  componentDidMount() = run statements that requires that the component is already placed in the DOM
2.Updating
  getDerivedStateFromProps()
  shouldComponentUpdate() =return a Boolean value that specifies whether React should continue with the rendering or not
  render() = re-render the HTML to the DOM, with the new changes
  getSnapshotBeforeUpdate() = even after the update, you can check what the values were before the update
  componentDidUpdate() = called after the component is updated in the DOM
3.Unmounting
  componentWillUnmount() =  called when the component is about to be removed from the DOM

Synthetic Events:
Your event handlers will be passed instances of SyntheticEvent , a cross-browser wrapper around the browser's native event
ensuring that the events are consistent across different browsers
stopPropagation() and preventDefault()

Controlled Component:
data is handled by react component
Internal state is not maintained
It accepts the current value as props


Uncontrolled Component:
handled by the DOM
Internal state is maintained
We access the values using refs

Lifting state up:
sharing state is accomplished by moving it up to the closest common ancestor of the components that need it. This is called “lifting state up”

Higher Order Components:
advanced technique in React for reusing component logic
It is a function that takes a component and returns a new component


Hooks:
Hooks are functions that let you “hook into” React state and lifecycle features from function components.
useState:Returns a stateful value, and a function to update it.
useEffect:to manage side effects like api calls
useContext:returns the current value for that context.
useReducer:Accepts a reducer of type (state, action) => newState, and returns the current state paired with a dispatch method.
useCallback:will return a memoized version of the callback that only changes if one of the dependencies has changed. This is useful when passing callbacks to optimized child components that rely on reference equality to prevent unnecessary renders
useMemo:will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.
useRef:It can be used to store a mutable value that does not cause a re-render when updated.It can be used to access a DOM element directly.
returns one item i.e. Object called current

useMemo returns value
useCallback returns function

-------------------------------------------------
// this will run when the component mounts and anytime the stateful data changes
React.useEffect(() => {
    alert('Hey, Nads here!');
});

// this will run, when the component is first initialized
React.useEffect(() => {
    alert('Hey, Nads here!');
}, []);

// this will run only when count state changes
React.useEffect(() => {
    fetch('nads').then(() => setLoaded(true));
}, [count]);

// this will run when the component is destroyed or before the component is removed from UI.
React.useEffect(() => {
    alert('Hey, Nads here');

    return () => alert('Goodbye Component');
});
--------------------------------------------------
const ans = {
    right: '✅',
    wrong: '❌'
}

const AnsContext = createContext(ans);

function Exam(props) {
    return (
        // Any child component inside this component can access the value which is sent.
        <AnsContext.Provider value={ans.right}>
            <RightAns />
        </AnsContext.Provider>
    )
}

function RightAns() {
    // it consumes value from the nearest parent provider.
    const ans = React.useContext(AnsContext);
    return <p>{ans}</p>
    // previously we were required to wrap up inside the AnsContext.Consumer
    // but this useContext hook, get rids that.
}
--------------------------------------------------
function App() {
    const myBtn = React.useRef(null);
    const handleBtn = () => myBtn.current.click();
    return (
        <button ref={myBtn} onChange={handleBtn} >
        </button>
    )
}
--------------------------------------------------
function reducer(state, dispatch) {
    switch(action.type) {
        case 'increment':
            return state+1;
        case 'decrement':
            return state-1;
        default:
            throw new Error();
    }
}

function useReducer() {
    // state is the state we want to show in the UI.
    const [state, dispatch] = React.useReducer(reducer, 0);

    return (
        <>
        Count : {state}
        <button onClick={() => dispatch({type:'decrement'})}>-</button>
        <button onClick={() => dispatch({type:'increment'})}>+</button>
        </>
    )
}
--------------------------------------------------
function useMemo() {

    const [count, setCount] = React.useState(60);

    const expensiveCount = useMemo(() => {
        return count**2;
    }, [count]) // recompute when count changes.
}
--------------------------------------------------
function useCallbackDemo() {
    const [count, setCount] = useState(60);

    const showCount = React.useCallback(() => {
        alert(`Count ${count}`);
    }, [count])

    return <> <SomeChild handler = {showCount} /> </>
}
--------------------------------------------------
useLayoutEffect :It works same as useEffect hook with one difference, the callback will run after rendering the component but before the actual updates have been painted to the screen.

⚠️ : Blocks visual updates until your callback is finished.

function useLayoutEffectDemo() {

    const myBtn = React.useRef(null);

    React.useLayoutEffect(() => {
        const rect = myBtn.current.getBoundingClientRect();
        // scroll position before the dom is visually updated
        console.log(rect.height);
    })
}
--------------------------------------------------


React PureComponent
to reduce the re-renders of a component unnecessarily

Error Boundaries:
catch errors that occur in the render phase

PropTypes: used to make sure the data you receive is valid
PropTypes.bool
PropTypes.func
PropTypes.node
PropTypes.number
PropTypes.string

--------------------------------------------------------
Action – It’s an object that describes what happened.
Reducer –  It is a place to determine how the state will change.
Store – State/ Object tree of the entire application is saved in the Store.
--------------------------------------------------------------------

Difference between map and forEach
The forEach() method does not create a new array based on the given array. The map() method creates an entirely new array. 
The forEach() method returns “undefined“. The map() method returns the newly created array according to the provided callback function

------------------------------------
function holdTillResponse() {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve('resolved');
    }, 2000);
  });
}

async function mainFun() {
  console.log('calling');
  const result = await holdTillResponse();
  console.log(result);
  //under this line will execute after above result
  console.log(111);
  // expected output: "resolved"
}

mainFun();


----------------------------
redux: js library
to manage the application state

Store: Holds the state of the application.
Action: The source information for the store.
Reducer: Specifies how the application's state changes in response to actions sent to the store.


createStore = create redux store
combineReducers = combine multiple slice reducers into single reducer
applyMiddleware = combine multiple middleware into store enhancer
compose = combine multiple store enhancers into single store enhancer


----------------------------
react redux:
useSelector = reads value from store state and subscribe to updates
useDispatch = return store dispatch method to let you dispatch actions

connect = reads value from store and re-reads values when store updates

mapStateToProps = called every time when store state changes and return object of data this component needs

mapDispatchToProps = 
if it is a function it will called once on component creation.It will receive dispatch as an argument and should return object full of function that used dispatch to dispatch actions.
if it is an object full of action creators,each action creator will be turned into a prop function that automatically dispatches its action when needed

syntax = connect(mapStateToProps, mapDispatchToProps)(Component)
-----------------------------

Context API
1. create the Context
export const MyContext = createContext("")

2. create Provider for Context => 
<MyContext.Provider value={{text,setText}}>
	<App />
</MyContext.Provider>

3.use the Context
const {text, setText} = useContext(MyContext)


----------------------------------
HOC: 

import React, { useState, useEffect } from 'react';

const withLoading = (Component) => {
  return function WithLoadingComponent(props) {
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
      const timer = setTimeout(() => {
        setIsLoading(false);
      }, 2000); 
      return () => clearTimeout(timer);
    }, []);

    if (isLoading) {
      return <div>Loading...</div>;
    }

    return <Component {...props} />;
  };
};

const DataComponent = () => {
  return (
    <div>
      <h1>Data Loaded</h1>
      <p>This is the data displayed after loading.</p>
    </div>
  );
};

const DataComponentWithLoading = withLoading(DataComponent);

const App = () => {
  return (
    <div>
      <DataComponentWithLoading />
    </div>
  );
};

export default App;